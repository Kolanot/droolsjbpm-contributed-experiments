package dispatch

/*
 * Copyright 2007 JBoss Inc
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import benchmarks.dispatch.fact.derived.*
import benchmarks.dispatch.fact.independent.*
import java.util.Date

import function benchmarks.dispatch.function.Helper.distanceToPickupInMiles
import function benchmarks.dispatch.function.Helper.minutesLateToJob

expander dispatch.dsl

rule "Time Available for Job when not on job"
	when
		w : Worker(status != Worker.Status.DISPATCHED_FOR_JOB)
		time matters
	then 
		DateWorkerInfo workerInfo = new DateWorkerInfo(w.getWorkerId());
		workerInfo.setType(WorkerInfo.Type.TIME_AVAILABLE_FOR_DISPATCH);
		#If we just use system date, workers get stamped as available in the past
		workerInfo.setValue(ds.getCurrentTime());
		insertLogical(workerInfo);
end

rule "Time Available for Job when already on Job"
	when
		w : Worker(status == Worker.Status.DISPATCHED_FOR_JOB)
	then 
		DateWorkerInfo workerInfo = new DateWorkerInfo(w.getWorkerId());
		workerInfo.setType(WorkerInfo.Type.TIME_AVAILABLE_FOR_DISPATCH);
		workerInfo.setValue(w.getTimeAvailable());
		insertLogical(workerInfo);
end

rule "Position Available for job when not on job"
	when
		w : Worker(status != Worker.Status.DISPATCHED_FOR_JOB)
		wp: WorkerPosition(workerId == w.workerId)
	then 
		PositionWorkerInfo workerInfo = new PositionWorkerInfo(w.getWorkerId());
		workerInfo.setType(WorkerInfo.Type.POSITION_AVAILABLE_FOR_DISPATCH);
		workerInfo.setLatitude(wp.getLatitude());
		workerInfo.setLongitude(wp.getLongitude());
		insertLogical(workerInfo);
end

rule "Position Available for Dispatch When On Load"
	when
		w : Worker(status == Worker.Status.DISPATCHED_FOR_JOB)
	then 
		PositionWorkerInfo workerInfo = new PositionWorkerInfo(w.getWorkerId());
		workerInfo.setType(WorkerInfo.Type.POSITION_AVAILABLE_FOR_DISPATCH);
		workerInfo.setLatitude(w.getCurrentJobLatitude());
		workerInfo.setLongitude(w.getCurrentJobLongitude());
		insertLogical(workerInfo);
end

rule "Distance to job"
	salience 0
	when
		j : Job()
		job dispatchable
		w: Worker()
		no exclusions
		dvi: PositionWorkerInfo(
			workerId == w.workerId,
			type == WorkerInfo.Type.POSITION_AVAILABLE_FOR_DISPATCH
			)
	then 
		Double dist = distanceToPickupInMiles(j, dvi.getLatitude(), dvi.getLongitude());
		DecimalInfo i = new DecimalInfo(j, w);
		i.setValue(dist * 1.3);
		i.setType(Info.Type.DISTANCE_TO_JOB_MILES);
		insertLogical(i);
end

rule "Time to get to job"
	when
		j : Job()
		job dispatchable
		w: Worker()
		no exclusions
		within range
	then 
		DecimalInfo ti = new DecimalInfo(j, w);
		ti.setType(Info.Type.TIME_TO_JOB_MINUTES);
		#Presume 45 MPH
		#dist_mr from "within range"
		ti.setValue((Double)dist_mr.getValue() / 45 * 60);
		insertLogical(ti);
end

rule "Minutes Late to Job"
	when
		j : Job()
		job dispatchable
		w: Worker()
		no exclusions
		#Redundant, but should be efficient given same rete network as above rule
		within range
		availDate: DateWorkerInfo(workerId == w.workerId, type == WorkerInfo.Type.TIME_AVAILABLE_FOR_DISPATCH)
		timeToJob: DecimalInfo(jobId == j.jobId, workerId == w.workerId, type == Info.Type.TIME_TO_JOB_MINUTES)
	then 
		DecimalInfo ti = new DecimalInfo(j ,w);
		ti.setType(Info.Type.MINUTES_LATE_TO_JOB);
		ti.setValue(minutesLateToJob(j.getStartTime(), availDate.getValue(), timeToJob.getValue()));
		insertLogical(ti);
end

/*
rule "Age of Worker Position"
	when
		j: Job() 
		job dispatchable
		w : Worker()
		time matters
		#Only compute if position too old
		wp : WorkerPosition(workerId == w.workerId, positionObservationDate < ds.positionCutOff)
	then 
		DecimalInfo ti = new DecimalInfo(j ,w);
		ti.setType(Info.Type.WORKER_POSITION_AGE_MINUTES);
		ti.setValue(minutesBetweenDates(wp.getPositionObservationDate(), ds.getPositionCutOff()));
		insertLogical(ti);
end
*/

