package dispatch

/*
 * Copyright 2007 JBoss Inc
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import benchmarks.dispatch.fact.derived.*
import benchmarks.dispatch.fact.independent.*
import benchmarks.dispatch.DispatchParameters;
import java.util.Date
import java.util.Set

expander dispatch.dsl

rule "Default Score Component"
salience -25
when
	#Force score accumulation even if no score components
	j : Job()
	job dispatchable
	w: Worker()
	within range
    #Don't score workers that aren't eligible
    not Exclusion(workerId == w.workerId, jobId == j.jobId)
then
	ScoreComponent sc = new ScoreComponent(j, w, ScoreComponent.Type.DEFAULT, 0D);
	insertLogical(sc);
end

 
rule "Accumulate Score"
salience -50
when
	j : Job()
	job dispatchable
	w: Worker()
	within range
    #Don't score workers that aren't eligible
    not Exclusion(workerId == w.workerId, jobId == j.jobId)
    totScore : Double() 
             from accumulate( ScoreComponent( workerId == w.workerId, jobId == j.jobId, sc:contribution ),
                              sum(sc) )
then
    Score s = new Score(j, w);
    s.setScore(totScore);
    insertLogical(s);
end


rule "Accumulate Top Workers"
salience -100
when
	j : Job()
	job dispatchable
    scoreList : Set()
             from accumulate( s: Score(jobId == j.jobId),
                              top_workers(s)
                              )
then
	TopWorkers topWorkers = new TopWorkers();
    topWorkers.setJobId(j.getJobId());
    for (Object s: scoreList){
    	topWorkers.getTopWorkers().add(((Score)s).getWorkerId());
    }
    insertLogical(topWorkers);
end

rule "Ensure Enough Workers"
salience -200
when
	tw: TopWorkers(size < DispatchParameters.MIN_SCORED_WORKERS)
	#Ensure no infinite loop?  Doesn't propogation cease on its own?
	mw: MaxRadius(jobId == tw.jobId, maxRadius < 4000)
	#TODO: Ensure sufficient minimum score of Top N vehicles here
then
	mw.setMaxRadius(mw.getMaxRadius() + DispatchParameters.INCREMENTAL_SEARCH_RADIUS);
    insert(mw);
end



