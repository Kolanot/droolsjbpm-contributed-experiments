###########################################################################################
#
#  This file contains all the combat related rules
#
#  @author etirelli
#
###########################################################################################
package org.drools.examples.lotrc

import org.drools.examples.lotrc.model.*
import org.drools.examples.lotrc.action.*
import org.drools.examples.lotrc.player.*
import org.apache.log4j.Logger

global Logger logger

#**********************************************************************
#    If there is a combat, prepare the domain model for it. 
# 
rule "Combat starts"
    ruleflow-group "resolve characters"
    lock-on-active
    salience 100
when
    $c : CombatAction()
then
    modify( $c ) { 
        prepareForCombat()
    }
end

#**********************************************************************
#    The first step in a combat is to randomily pick a defender 
# among all the defending characters in the region and expose both
# attacker and defender. 
# 
rule "Select characters for the combat"
    ruleflow-group "resolve characters"
when
    $c : CombatAction( defenderName == null, status == CombatStatus.UNSETTLED )
    $r : Region( name == $c.regionName ) 
    $a : Character( name == $c.attackerName )
    $d : Character( ) from accumulate(
            $def : Character( allegiance != $a.allegiance ) from $r.characters,
            randomSelect( $def ) )
then
    modify( $c ) { 
        setDefenderName( $d.getName() )
    }
    modify( $a ) {
        setStatus( CharacterStatus.EXPOSED )
    }
    modify( $d ) {
        setStatus( CharacterStatus.EXPOSED )
    }
    logger.info( "Combat started on "+$r.getName()+". "+$a.getName()+" attacks "+$d.getName()+"." ); 
end

#**********************************************************************
#    If the revealed characters are Merry and the Witch King, then
# Merry immediately defeats the Witch King and this round of the combat
# is over. 
# 
rule "Merry defeats the Witch King"
    ruleflow-group "resolve characters"
when
    $c : CombatAction( status == CombatStatus.UNSETTLED )
    $m : Character( name == CharacterName.MERRY, name in ($c.attackerName, $c.defenderName) )
    $w : Character( name == CharacterName.WITCH_KING, name in ($c.attackerName, $c.defenderName) )
then
    modify( $c ) {
        setStatus( CombatStatus.SETTLED )
    }
    modify( $w ) {
        setStatus( CharacterStatus.DEFEATED )
    }
    logger.info( "Merry immediately defeats the Witch King" );
end

#**********************************************************************
#    If the revealed characters are Gimly and the Orcs, then
# Gimli immediately defeats the Orcs and this round of the combat
# is over. 
# 
rule "Gimli defeats the orcs"
    ruleflow-group "resolve characters"
when
    $c : CombatAction( status == CombatStatus.UNSETTLED )
    $g : Character( name == CharacterName.GIMLI, name in ($c.attackerName, $c.defenderName) )
    $o : Character( name == CharacterName.ORCS, name in ($c.attackerName, $c.defenderName) )
then
    modify( $c ) {
        setStatus( CombatStatus.SETTLED )
    }
    modify( $o ) {
        setStatus( CharacterStatus.DEFEATED )
    }
    logger.info( "Gimli immediately defeats the Orcs" );
end

#**********************************************************************
#    If the revealed characters are Legolas and the Flying Nazgul, then
# Legolas immediately defeats the Flying Nazgul and this round of the 
# combat is over. 
# 
rule "Legolas defeats the Flying Nazgul"
    ruleflow-group "resolve characters"
when
    $c : CombatAction( status == CombatStatus.UNSETTLED )
    $l : Character( name == CharacterName.LEGOLAS, name in ($c.attackerName, $c.defenderName) )
    $f : Character( name == CharacterName.FLYING_NAZGUL, name in ($c.attackerName, $c.defenderName) )
then
    modify( $c ) {
        setStatus( CombatStatus.SETTLED )
    }
    modify( $f ) {
        setStatus( CharacterStatus.DEFEATED )
    }
    logger.info( "Legolas immediately defeats the Flying Nazgul" );
end

#**********************************************************************
#    If Boromir is revealed, he sacrifices himself defeating the 
# Sauron character as well and this round of the combat is over. 
# 
rule "Boromir sacrifices himself to defeat the opponent"
    ruleflow-group "resolve characters"
when
    $c : CombatAction( status == CombatStatus.UNSETTLED )
    $b : Character( name == CharacterName.BOROMIR, name in ($c.attackerName, $c.defenderName) )
    $o : Character( name != CharacterName.BOROMIR, name in ($c.attackerName, $c.defenderName) )
then
    modify( $c ) {
        setStatus( CombatStatus.SETTLED )
    }
    modify( $b ) {
        setStatus( CharacterStatus.DEFEATED )
    }
    modify( $o ) {
        setStatus( CharacterStatus.DEFEATED )
    }
    logger.info( "Boromir sacrifices himself to defeat "+$o.getName() );
end

#**********************************************************************
#    If combat is still unsettled, then players must select a card 
# to play. 
# 
rule "Select Cards to play" 
    ruleflow-group "select cards"
when
    $c : CombatAction( status == CombatStatus.UNSETTLED )
    $f : Player( allegiance == Allegiance.FELLOWSHIP )
    $s : Player( allegiance == Allegiance.SAURON )
then
    PlayCardAction fc = $f.playACard( $c.getHidden() );
    logger.info( "Fellowship player selected a card to play: "+fc.getCardName() );
    PlayCardAction sc = $s.playACard( $c.getHidden() );
    logger.info( "Sauron player selected a card to play: "+sc.getCardName() );
    // REMOVE_THIS
    if( fc == null || sc == null || fc.getCardName() == null || sc.getCardName() == null ) {
        logger.fatal("ABNORMAL TERMINATION: "+fc+" / "+sc );
        drools.halt();
    } 
    insert( fc ); 
    insert( sc );
end

#**********************************************************************
#    The attacker plays his card 
# 
rule "Attacker plays his card"
    ruleflow-group "play cards"
when
    $c    : CombatAction( status == CombatStatus.UNSETTLED, attackerCard == null )
    $char : Character( name == $c.attackerName )
    $pca  : PlayCardAction( allegiance == $char.allegiance )
    $card : Card( status == CardStatus.UNPLAYED, allegiance == $pca.allegiance, name == $pca.cardName )
    $ap   : Player( allegiance == $pca.allegiance )
    $dp   : Player( allegiance != $pca.allegiance )
then
    logger.info( "Attacker plays: "+$card );
    modify( $c ) {
        setAttackerCard( $card )
    }
    modify( $card ) {
        setStatus( CardStatus.PLAYED )
    }
    retract( $pca );
    // notify players
    $ap.notify( $pca ); 
    $dp.notify( $pca ); 
end
 

#**********************************************************************
#    The defender plays his card 
# 
rule "Defender plays his card"
    ruleflow-group "play cards"
when
    $c    : CombatAction( status == CombatStatus.UNSETTLED, defenderCard == null )
    $char : Character( name == $c.defenderName )
    $pca  : PlayCardAction( allegiance == $char.allegiance )
    $card : Card( status == CardStatus.UNPLAYED, allegiance == $pca.allegiance, name == $pca.cardName )
    $ap   : Player( allegiance != $pca.allegiance )
    $dp   : Player( allegiance == $pca.allegiance )
then
    logger.info( "Defender plays: "+$card );
    modify( $c ) {
        setDefenderCard( $card )
    }
    modify( $card ) {
        setStatus( CardStatus.PLAYED )
    }
    retract( $pca );
    // notify players
    $ap.notify( $pca ); 
    $dp.notify( $pca ); 
end
 
#**********************************************************************
#    If the combat is still unsettled, then we calculate each side's
# strength and the combat final result. If 0, then it is a tie and
# both characters are defeated. If positive number, the attacker wins.
# If negative number, the defender wins.
# 
rule "Calculate combat result"
    ruleflow-group "casualties"
    lock-on-active
when
    $c    : CombatAction( status == CombatStatus.UNSETTLED )
    $att  : Character( name == $c.attackerName )
    $def  : Character( name == $c.defenderName )
then
    int result = $att.getStrength() + $c.getAttackerCard().getPower() -
                 $def.getStrength() - $c.getDefenderCard().getPower();
    modify( $c ) {
        setResult( result ),
        setStatus( CombatStatus.SETTLED );
    }
    logger.info( "Combat results: "+$c );
end

#**********************************************************************
#    If the combat result is equals or less than zero, the attacker
# is defeated.
# 
rule "Attacker is defeated"
    ruleflow-group "casualties"
when
    $c    : CombatAction( status == CombatStatus.SETTLED, result <= 0 )
    $att  : Character( name == $c.attackerName, status == CharacterStatus.EXPOSED )
then
    logger.info( "The attacker ( "+$att+" ) was defeated." );
    modify( $att ) {
        setStatus( CharacterStatus.DEFEATED )
    }
end

#**********************************************************************
#    If the combat result is equals or greater than zero, the defender
# is defeated.
# 
rule "Defender is defeated"
    ruleflow-group "casualties"
when
    $c    : CombatAction( status == CombatStatus.SETTLED, result >= 0 )
    $def  : Character( name == $c.defenderName, status == CharacterStatus.EXPOSED )
then
    logger.info( "The defender ( "+$def+" ) was defeated." );
    modify( $def ) {
        setStatus( CharacterStatus.DEFEATED )
    }
end

#**********************************************************************
#    Finally, we need to remove the combat casualties from the board
# and notify players.
# 
rule "Remove casualties"
    ruleflow-group "casualties"
when
    $c    : CombatAction( status == CombatStatus.SETTLED )
    $r    : Region( name == $c.regionName )
    $char : Character( status == CharacterStatus.DEFEATED, this memberOf $r.characters )
    $ap   : Player( allegiance == $c.allegiance )
    $dp   : Player( allegiance != $c.allegiance )
then
    logger.info("Removing defeated character : "+$char );
    modify( $r ) {
        removeCharacter( $char )
    }
    // notify players
    CharacterDefeatedAction cda = new CharacterDefeatedAction( $char.getAllegiance(), $char.getName() );
    $ap.notify( cda );
    $dp.notify( cda );
end

#**********************************************************************
#    Last, but not least, after all rounds of combat were fought, we
# must remove the Combat Action from the working memory, since it is
# no longer true. 
# 
rule "Clean up combat"
    ruleflow-group "combat end"
when
    $c : CombatAction( )
then
    retract( $c );
end

